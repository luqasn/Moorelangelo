/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.luqasn.stateviz

import kotlinx.ast.common.AstSource
import kotlinx.ast.common.ast.Ast
import kotlinx.ast.common.ast.AstWithExtensions
import kotlinx.ast.common.ast.DefaultAstNode
import kotlinx.ast.common.klass.KlassDeclaration
import kotlinx.ast.common.klass.KlassIdentifier
import kotlinx.ast.common.klass.KlassNode
import kotlinx.ast.common.klass.asStringComponent
import kotlinx.ast.common.print
import kotlinx.ast.common.printString
import kotlinx.ast.grammar.kotlin.common.summary
import kotlinx.ast.grammar.kotlin.target.antlr.kotlin.KotlinGrammarAntlrKotlinParser
import java.io.File

fun main() {
    val source = AstSource.File(
        "ExampleMain.kt"
    )
    val kotlinFile = KotlinGrammarAntlrKotlinParser.parseKotlinFile(source)
    kotlinFile.summary(attachRawAst = false)
        .onSuccess { astList ->
            writeAst("all.txt", astList)
            astList.forEach{
                processNode(it)
            }
        }.onFailure { errors ->
            errors.forEach(::println)
        }
}

fun processNode(it: Ast) {
    println("examining ${it.description}")
    when(it) {
        is KlassIdentifier -> {
            processStateMachine(it)
        }
        is KlassNode<*> -> {
            println("this is a KlassNode with ${it.children.size} children!")
            
            it.children.forEach(::processNode)
        }
        is DefaultAstNode -> {
            println("this is a DefaultAstNode with ${it.children.size} children!")
            
            it.children.forEach(::processNode)
        }
    }
}

private fun writeAst(fileName: String, astList: List<Ast>) {
    File(fileName).writer().use { writer ->
        astList.forEach {
            writer.write(it.printString())
            writer.write("\n")
        }
    }
}

fun processStateMachine(it: KlassIdentifier) {
    if (it.identifier != "StateMachine")
        return
    writeAst("statemachine-${it.identifier}.txt", it.children)
    it.parameter.forEach{it.print()}
}
